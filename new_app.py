# ===== app.py (BiLSTM + ARIMA, pipeline ƒë·ªìng b·ªô) =====
import pandas as pd
import numpy as np
import streamlit as st
from keras.models import load_model
from sklearn.metrics import mean_absolute_error
import plotly.graph_objects as go
import joblib
import yfinance as yf
from statsmodels.tsa.arima.model import ARIMA
import datetime as dt

st.set_page_config(page_title="Stock Closing Price Prediction", layout="wide")
st.title('Stock Closing Price Prediction')

SEQUENCE_LENGTH = 150

# Session: nh·ªõ chart/m√£ h·ªó tr·ª£ g·∫ßn nh·∫•t ƒë·ªÉ t√°i d√πng khi m√£ hi·ªán t·∫°i kh√¥ng h·ªó tr·ª£
if "last_supported_ticker" not in st.session_state:
    st.session_state["last_supported_ticker"] = None
if "last_supported_fig4" not in st.session_state:
    st.session_state["last_supported_fig4"] = None

SUPPORTED_TICKERS = [
    'AAPL', 'MSFT', 'GOOGL', 'AMZN', 'META',
    'TSLA', 'NVDA', 'NFLX', 'BRK-B', 'JPM',
    'V', 'MA', 'PG', 'KO', 'PEP',
    'VCB.VN', 'CTG.VN', 'BID.VN', 'TCB.VN', 'VPB.VN',
]

TICKER_NAMES = {
    'AAPL': 'Apple Inc.',
    'MSFT': 'Microsoft Corporation',
    'GOOGL': 'Alphabet Inc. (Google)',
    'AMZN': 'Amazon.com, Inc.',
    'META': 'Meta Platforms, Inc. (Facebook)',
    'TSLA': 'Tesla, Inc.',
    'NVDA': 'NVIDIA Corporation',
    'NFLX': 'Netflix, Inc.',
    'BRK-B': 'Berkshire Hathaway Inc.',
    'JPM': 'JPMorgan Chase & Co.',
    'V': 'Visa Inc.',
    'MA': 'Mastercard Inc.',
    'PG': 'Procter & Gamble Co.',
    'KO': 'Coca-Cola Co.',
    'PEP': 'PepsiCo, Inc.',
    'VCB.VN': 'Ng√¢n h√†ng TMCP Ngo·∫°i th∆∞∆°ng Vi·ªát Nam',
    'CTG.VN': 'Ng√¢n h√†ng TMCP C√¥ng Th∆∞∆°ng Vi·ªát Nam',
    'BID.VN': 'Ng√¢n h√†ng TMCP ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam',
    'TCB.VN': 'Ng√¢n h√†ng TMCP K·ªπ Th∆∞∆°ng Vi·ªát Nam',
    'VPB.VN': 'Ng√¢n h√†ng TMCP Vi·ªát Nam Th·ªãnh V∆∞·ª£ng',
}

# ---------------- Sidebar ----------------
with st.sidebar:
    st.header("C·∫•u h√¨nh")
    ticker = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu", "GOOGL").upper()
    start_date = st.date_input("Ng√†y b·∫Øt ƒë·∫ßu", value=dt.date(2015, 1, 1))
    end_date   = st.date_input("Ng√†y k·∫øt th√∫c", value=dt.date.today())
    with st.expander("üìÉ Xem to√†n b·ªô danh s√°ch h·ªó tr·ª£", expanded=False):
        df_supported = pd.DataFrame([
            {"M√£ c·ªï phi·∫øu": t, "T√™n c√¥ng ty": TICKER_NAMES.get(t, "(ch∆∞a c·∫≠p nh·∫≠t)")}
            for t in SUPPORTED_TICKERS
        ])
        st.table(df_supported)

        # Cho ph√©p t·∫£i v·ªÅ d·∫°ng CSV
        st.download_button(
            "T·∫£i danh s√°ch (.csv)",
            data=df_supported.to_csv(index=False),
            file_name="supported_tickers.csv",
            mime="text/csv",
            use_container_width=True
        )

    if ticker in SUPPORTED_TICKERS:
        st.success("‚úÖ M√£ n√†y ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi m√¥ h√¨nh BiLSTM (ƒë√£ training).")
    else:
        st.warning(
            "‚ö†Ô∏è BiLSTM ch·ªâ √°p d·ª•ng cho c√°c m√£ ƒë√£ training.\n\n"
            "B·∫°n v·∫´n xem ƒë∆∞·ª£c MA100/MA200 v√† ARIMA 30 ng√†y."
        )

# Validate ng√†y
if start_date >= end_date:
    st.error("‚ö† Ng√†y b·∫Øt ƒë·∫ßu ph·∫£i nh·ªè h∆°n ng√†y k·∫øt th√∫c")
    st.stop()

# ---------------- Load d·ªØ li·ªáu ----------------
df = yf.download(ticker, start=start_date, end=end_date, auto_adjust=True, progress=False)
if df.empty:
    st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Ki·ªÉm tra m√£ c·ªï phi·∫øu ho·∫∑c k·∫øt n·ªëi m·∫°ng.")
    st.stop()

# ---------------- Th·ªëng k√™ m√¥ t·∫£ ----------------
st.subheader(f'D·ªØ li·ªáu t·ª´ {start_date} ƒë·∫øn {end_date}')
st.dataframe(df.describe().round(2))
with st.expander(" Gi·∫£i th√≠ch c√°c ch·ªâ s·ªë th·ªëng k√™", expanded=False):
    st.markdown("""
- **count**: S·ªë l∆∞·ª£ng gi√° tr·ªã kh√¥ng b·ªã thi·∫øu trong c·ªôt.
- **mean**: Gi√° tr·ªã trung b√¨nh c·ªông c·ªßa c·ªôt.
- **std**: ƒê·ªô l·ªách chu·∫©n, cho bi·∫øt m·ª©c ƒë·ªô ph√¢n t√°n so v·ªõi trung b√¨nh.
- **min**: Gi√° tr·ªã nh·ªè nh·∫•t trong c·ªôt.
- **25% (Q1)**: Ph√¢n v·ªã th·ª© nh·∫•t ‚Äì 25% d·ªØ li·ªáu nh·ªè h∆°n gi√° tr·ªã n√†y.
- **50% (Median)**: Trung v·ªã ‚Äì 50% d·ªØ li·ªáu nh·ªè h∆°n gi√° tr·ªã n√†y.
- **75% (Q3)**: Ph√¢n v·ªã th·ª© ba ‚Äì 75% d·ªØ li·ªáu nh·ªè h∆°n gi√° tr·ªã n√†y.
- **max**: Gi√° tr·ªã l·ªõn nh·∫•t trong c·ªôt.
    """)

# ---------------- MA100 / MA200 ----------------
close_series = df['Close'].astype(float).copy()
close_series.name = 'Close'

ma100 = close_series.rolling(100).mean()
ma200 = close_series.rolling(200).mean()

df_ma100 = pd.concat([close_series, ma100], axis=1).dropna()
df_ma100.columns = ['Close', 'MA100']

df_ma200 = pd.concat([close_series, ma100, ma200], axis=1).dropna()
df_ma200.columns = ['Close', 'MA100', 'MA200']

# --- Close + MA100 ---
st.subheader(f'Bi·ªÉu ƒë·ªì gi√° ƒë√≥ng c·ª≠a + MA100 c·ªßa {ticker}')
if df_ma100.empty:
    st.info("Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh MA100 (c·∫ßn ‚â• 100 phi√™n).")
else:
    fig_ma100 = go.Figure()
    fig_ma100.add_trace(go.Scatter(
        x=df_ma100.index, y=df_ma100['Close'], name='Gi√° ƒë√≥ng c·ª≠a', mode='lines',
        hovertemplate='Ng√†y: %{x|%Y-%m-%d}<br>Gi√° ƒë√≥ng c·ª≠a: %{y:.2f}<extra></extra>'
    ))
    fig_ma100.add_trace(go.Scatter(
        x=df_ma100.index, y=df_ma100['MA100'], name='MA100', mode='lines',
        hovertemplate='Ng√†y: %{x|%Y-%m-%d}<br>MA100: %{y:.2f}<extra></extra>'
    ))
    fig_ma100.update_layout(
        title='Gi√° ƒë√≥ng c·ª≠a + MA100',
        xaxis_title='Ng√†y', yaxis_title='Gi√° c·ªï phi·∫øu', hovermode='x unified'
    )
    # (tu·ª≥ ch·ªçn) c≈©ng √©p ƒë·ªãnh d·∫°ng x tr√™n hover c·ªßa tr·ª•c:
    fig_ma100.update_xaxes(hoverformat='%Y-%m-%d')
    st.plotly_chart(fig_ma100, use_container_width=True)

# --- Close + MA100 + MA200 ---
st.subheader(f'Bi·ªÉu ƒë·ªì gi√° ƒë√≥ng c·ª≠a + MA100 + MA200 c·ªßa {ticker}')
if df_ma200.empty:
    st.info("Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t√≠nh MA200 (c·∫ßn ‚â• 200 phi√™n).")
else:
    fig_ma200 = go.Figure()
    fig_ma200.add_trace(go.Scatter(
        x=df_ma200.index, y=df_ma200['Close'], name='Gi√° ƒë√≥ng c·ª≠a', mode='lines',
        hovertemplate='Ng√†y: %{x|%Y-%m-%d}<br>Gi√° ƒë√≥ng c·ª≠a: %{y:.2f}<extra></extra>'
    ))
    fig_ma200.add_trace(go.Scatter(
        x=df_ma200.index, y=df_ma200['MA100'], name='MA100', mode='lines',
        hovertemplate='Ng√†y: %{x|%Y-%m-%d}<br>MA100: %{y:.2f}<extra></extra>'
    ))
    fig_ma200.add_trace(go.Scatter(
        x=df_ma200.index, y=df_ma200['MA200'], name='MA200', mode='lines',
        hovertemplate='Ng√†y: %{x|%Y-%m-%d}<br>MA200: %{y:.2f}<extra></extra>'
    ))
    fig_ma200.update_layout(
        title='Gi√° ƒë√≥ng c·ª≠a + MA100 + MA200',
        xaxis_title='Ng√†y', yaxis_title='Gi√° c·ªï phi·∫øu', hovermode='x unified'
    )
    fig_ma200.update_xaxes(hoverformat='%Y-%m-%d')  # tu·ª≥ ch·ªçn
    st.plotly_chart(fig_ma200, use_container_width=True)


# ---------------- Chu·∫©n b·ªã train/test ----------------
split_idx = int(len(close_series) * 0.85)
if len(close_series) <= SEQUENCE_LENGTH + 1:
    st.warning("D·ªØ li·ªáu qu√° ng·∫Øn so v·ªõi SEQUENCE_LENGTH. H√£y ch·ªçn kho·∫£ng th·ªùi gian d√†i h∆°n.")
    st.stop()

train_df = pd.DataFrame(close_series.iloc[:split_idx])
test_df  = pd.DataFrame(close_series.iloc[split_idx:])

# ---------------- BiLSTM (ch·ªâ cho m√£ ƒë√£ training) ----------------
st.subheader('Gi√° d·ª± ƒëo√°n vs Th·ª±c t·∫ø (Test Set)')

if ticker in SUPPORTED_TICKERS:
    try:
        # Load scaler/model ƒë√∫ng c·∫∑p
        scaler = joblib.load("scaler2.save")
        model = load_model("multi_ticket_train2.h5")

        # Ti·ªÅn x·ª≠ l√Ω
        past_days = train_df.tail(SEQUENCE_LENGTH)
        final_df  = pd.concat([past_days, test_df], axis=0)
        final_df.columns = ['Close']

        scaled_all = scaler.transform(final_df[['Close']])
        x_test, y_test_scaled = [], []
        for i in range(SEQUENCE_LENGTH, scaled_all.shape[0]):
            x_test.append(scaled_all[i - SEQUENCE_LENGTH : i])
            y_test_scaled.append(scaled_all[i, 0])
        x_test = np.array(x_test)
        y_test_scaled = np.array(y_test_scaled)

        # D·ª± ƒëo√°n
        y_pred_scaled = model.predict(x_test, verbose=0).reshape(-1, 1)
        y_pred = scaler.inverse_transform(y_pred_scaled).ravel()
        y_test = scaler.inverse_transform(y_test_scaled.reshape(-1, 1)).ravel()
        test_index = final_df.index[SEQUENCE_LENGTH:]

        # Calibration (tu·ª≥ ch·ªçn)
        try:
            a, b = np.polyfit(y_pred, y_test, 1)
            y_pred_cal = a * y_pred + b
            mae_raw = mean_absolute_error(y_test, y_pred)
            mae_cal = mean_absolute_error(y_test, y_pred_cal)
            if mae_cal < mae_raw:
                y_pred, mae, cal_note = y_pred_cal, mae_cal, f"(calibrated, a={a:.3f}, b={b:.3f})"
            else:
                mae, cal_note = mae_raw, ""
        except Exception:
            mae, cal_note = mean_absolute_error(y_test, y_pred), ""

        # Plot
        daily_abs_err = np.abs(y_pred - y_test)
        daily_pct_err = np.where(y_test != 0, daily_abs_err / np.abs(y_test) * 100, np.nan)
        customdata_pred = np.column_stack([y_test, daily_abs_err, daily_pct_err])

        fig4 = go.Figure()
        fig4.add_trace(go.Scatter(
            x=test_index, y=y_test, name='Gi√° th·ª±c t·∫ø',
            hovertemplate='Ng√†y: %{x}<br>Gi√° th·ª±c t·∫ø: %{y:.2f}<extra></extra>'
        ))
        fig4.add_trace(go.Scatter(
            x=test_index, y=y_pred, name=f'BiLSTM D·ª± ƒëo√°n {cal_note}',
            customdata=customdata_pred,
            hovertemplate=('Ng√†y: %{x}<br>Gi√° d·ª± ƒëo√°n: %{y:.2f}'
                           '<br>Th·ª±c t·∫ø: %{customdata[0]:.2f}'
                           '<br>L·ªách: %{customdata[1]:.2f}'
                           '<br>L·ªách %%: %{customdata[2]:.2f}%%<extra></extra>')
        ))
        fig4.update_layout(title=f'D·ª± ƒëo√°n vs Th·ª±c t·∫ø  ‚Ä¢  MAE={mae:.2f}',
                           xaxis_title='Ng√†y',
                           yaxis_title=('Gi√° c·ªï phi·∫øu (VND)' if ticker.endswith('.VN') else 'Gi√° c·ªï phi·∫øu'),
                           hovermode='x unified')
        st.plotly_chart(fig4, use_container_width=True)

        # L∆∞u l·∫°i ƒë·ªÉ d√πng cho c√°c l·∫ßn sau
        st.session_state["last_supported_ticker"] = ticker
        st.session_state["last_supported_fig4"] = fig4

    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ ch·∫°y BiLSTM cho {ticker}: {e}")

else:
    prev_ticker = st.session_state.get("last_supported_ticker")
    prev_fig = st.session_state.get("last_supported_fig4")

    if prev_ticker is not None and prev_fig is not None:
        st.info(
            f"‚ÑπÔ∏è M√£ **{ticker}** ch∆∞a ƒë∆∞·ª£c training. "
            f"ƒêang hi·ªÉn th·ªã **bi·ªÉu ƒë·ªì c·ªßa m√£ tr∆∞·ªõc: {prev_ticker}**."
        )
        fig_prev = go.Figure(prev_fig)
        old_title = (fig_prev.layout.title.text or "Gi√° d·ª± ƒëo√°n vs Th·ª±c t·∫ø")
        fig_prev.update_layout(title=f"{old_title} ‚Ä¢ t·ª´ m√£ tr∆∞·ªõc: {prev_ticker}")
        st.plotly_chart(fig_prev, use_container_width=True)
    else:
        st.info("‚ÑπÔ∏è M√£ n√†y **ch∆∞a ƒë∆∞·ª£c training** v√† hi·ªán **ch∆∞a c√≥ bi·ªÉu ƒë·ªì tr∆∞·ªõc ƒë√≥** ƒë·ªÉ hi·ªÉn th·ªã.")
        fig_placeholder = go.Figure()
        fig_placeholder.add_annotation(
            text="üö´ Ch∆∞a h·ªó tr·ª£ BiLSTM cho m√£ n√†y",
            xref="paper", yref="paper", x=0.5, y=0.5, showarrow=False,
            font=dict(size=20, color="gray"),
        )
        fig_placeholder.update_layout(
            xaxis=dict(visible=False),
            yaxis=dict(visible=False),
            plot_bgcolor="rgba(0,0,0,0)",
            height=300
        )
        st.plotly_chart(fig_placeholder, use_container_width=True)

# ---------------- D·ª± ƒëo√°n 30 ng√†y t·ªõi (ARIMA, c√≥ loading) ----------------
st.subheader(f'D·ª± ƒëo√°n gi√° c·ªï phi·∫øu 30 ng√†y t·ªõi cho {ticker}')

loading_ph = st.empty()  # ch·ª´a ch·ªó hi·ªÉn th·ªã spinner ngay d∆∞·ªõi subheader
with loading_ph.container():
    with st.spinner("‚è≥ ƒêang t√≠nh to√°n d·ª± b√°o 30 ng√†y‚Ä¶"):
        close = df['Close'].astype(float)
        log_price = np.log(close)

        best_fit, best_cfg, best_aic = None, None, float("inf")
        for p in range(0, 4):
            for q in range(0, 4):
                for trend in ['n', 't']:  # 't' = c√≥ drift
                    try:
                        fit = ARIMA(log_price, order=(p, 1, q), trend=trend).fit(
                            method_kwargs={"warn_convergence": False}
                        )
                        if fit.aic < best_aic:
                            best_aic, best_fit, best_cfg = fit.aic, fit, (p, 1, q, trend)
                    except Exception:
                        pass

        if best_fit is None:
            best_cfg = (1, 1, 1, 't')
            best_fit = ARIMA(log_price, order=(1, 1, 1), trend='t').fit(
                method_kwargs={"warn_convergence": False}
            )

        steps = 30
        fc_log = best_fit.get_forecast(steps=steps).predicted_mean
        fc_price = np.exp(fc_log)

        future_idx = pd.bdate_range(close.index[-1] + pd.offsets.BDay(1), periods=steps)

        fig5 = go.Figure()
        fig5.add_trace(go.Scatter(
            x=future_idx, y=fc_price, mode='lines', name='ARIMA d·ª± ƒëo√°n',
            line=dict(dash='dash'),
            hovertemplate='Ng√†y: %{x|%Y-%m-%d}<br>Gi√° d·ª± ƒëo√°n: %{y:.2f}<extra></extra>'
        ))
        p, d, q, trend = best_cfg
        fig5.update_layout(
            title=f'D·ª± ƒëo√°n 30 ng√†y t·ªõi (ARIMA, order=({p},{d},{q}), trend=\"{trend}\")',
            xaxis_title='Ng√†y',
            yaxis_title=('Gi√° c·ªï phi·∫øu (VND)' if ticker.endswith('.VN') else 'Gi√° c·ªï phi·∫øu'),
            hovermode='x unified'
        )

loading_ph.empty()
st.plotly_chart(fig5, use_container_width=True)
